{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Java Object-Oriented Programming Course","text":"<p>Learn modern Java OOP by building. Clear concepts, practical examples, and projects that develop real programming skills.</p>"},{"location":"#who-its-for","title":"Who it's for","text":"<ul> <li>Students (at University Metropolitan Tirana) learning object-oriented programming concepts.</li> <li>Developers comfortable with basic programming who want to master Java OOP.</li> <li>Anyone seeking a structured approach to Java without unnecessary complexity.</li> </ul>"},{"location":"#whats-inside","title":"What's inside","text":"<p>Foundations: Build your OOP foundation with classes, objects, collections, and object-oriented thinking.</p> <p>Core OOP Principles: Master inheritance, polymorphism, encapsulation, and abstract programming.</p> <p>File and Exception Handling: Write robust applications that handle errors and work with external data.</p> <p>Modern Java: Use generics, lambdas, streams, and JavaFX for contemporary Java development.</p> <p>Projects: Apply your knowledge through progressive sprints and a capstone project.</p> <p>Resources: Reference materials, tools, and extended learning resources.</p>"},{"location":"#suggested-path","title":"Suggested path","text":"<ul> <li>Foundations first: Introduction to OOP \u2192 Classes &amp; Objects \u2192 Arrays &amp; Collections \u2192 Thinking in Objects.</li> <li>Core principles: Inheritance \u2192 Polymorphism \u2192 Encapsulation \u2192 Abstract Classes &amp; Interfaces.</li> <li>Practical skills: Exception Handling \u2192 Files &amp; Streams.</li> <li>Modern features: Generics \u2192 Lambdas &amp; Streams \u2192 JavaFX &amp; GUI.</li> <li>Build projects throughout to reinforce learning.</li> </ul>"},{"location":"#study-tips","title":"Study tips","text":"<ul> <li>Code every example yourself - reading code is not the same as writing it.</li> <li>Complete the exercises in each section before moving forward.</li> <li>Start each project sprint when you finish the related concepts.</li> <li>Explain concepts to others - teaching reveals what you truly understand.</li> </ul>"},{"location":"#word-of-encouragement","title":"Word of encouragement","text":"<p>Object-oriented programming changes how you think about code. Start simple, practice consistently, and build real projects.</p> <p>When concepts feel abstract, write more code. When projects feel overwhelming, return to the fundamentals and take smaller steps.</p> <p>Every expert was once a beginner. Keep coding, keep building, keep learning.</p>"},{"location":"01-fundamentals/","title":"Foundations Overview","text":"<p>Build the core concepts that power object-oriented programming. Clear explanations, practical examples, and exercises that establish the foundation for everything that follows.</p>"},{"location":"01-fundamentals/#introduction-to-oop","title":"Introduction to OOP","text":"<p>From procedures to objects</p> <p>Understand why object-oriented programming dictates how we structure code. Learn the fundamental shift from writing step-by-step procedures to modeling real-world entities as objects with properties and behaviors.</p> <p>You'll learn: Why OOP matters, the core principles that guide object design, and how to think in terms of objects rather than functions</p>"},{"location":"01-fundamentals/#classes-objects","title":"Classes &amp; Objects","text":"<p>Blueprints and instances</p> <p>Master the building blocks of Java OOP. Create your first classes, instantiate objects, define constructors, and understand how objects interact through methods and fields.</p> <p>You'll learn: How to design classes, create objects, write constructors and methods, and manage object state</p>"},{"location":"01-fundamentals/#arrays-collections","title":"Arrays &amp; Collections","text":"<p>Managing groups of data</p> <p>Work with collections of objects using arrays and ArrayList. Learn when to use each approach and how to store, access, and manipulate groups of related data efficiently.</p> <p>You'll learn: Array fundamentals, ArrayList operations, choosing the right collection type, and iterating through data</p>"},{"location":"01-fundamentals/#thinking-in-objects","title":"Thinking in Objects","text":"<p>The object-oriented mindset</p> <p>Develop the problem-solving approach that distinguishes object-oriented design. Learn to identify objects in real-world problems, define their responsibilities, and model relationships between them.</p> <p>You'll learn: How to decompose problems into objects, assign responsibilities, and design clean object interactions</p> <p>Start here: Begin with Introduction to OOP, then work through each topic in order. Complete the exercises after each section to reinforce your understanding\u2014practice builds intuition.</p>"},{"location":"02-core-oop/","title":"Core OOP Principles Overview","text":"<p>Master the four pillars that define object-oriented programming. Build robust, maintainable systems using inheritance, polymorphism, encapsulation, and abstraction with clear examples and practical applications.</p>"},{"location":"02-core-oop/#abstraction-and-encapsulation","title":"Abstraction and Encapsulation","text":"<p>Control access and protect data</p> <p>Master the practice of bundling data and methods while controlling access through visibility modifiers. Learn to create clean interfaces using getters, setters, and proper data hiding techniques.</p> <p>You'll learn: Access modifiers, getter/setter methods, data validation, and maintaining object integrity</p>"},{"location":"02-core-oop/#inheritance","title":"Inheritance","text":"<p>Extend and specialize classes</p> <p>Learn to create class hierarchies where child classes inherit properties and methods from parent classes. Master super and subclass relationships, method overriding, and the IS-A relationship that models real-world specialization.</p> <p>You'll learn: How to extend classes, override methods, use super keyword, and design effective class hierarchies</p>"},{"location":"02-core-oop/#polymorphism","title":"Polymorphism","text":"<p>One interface, many forms</p> <p>Understand how objects of different types can be treated uniformly through method overriding and dynamic binding. Write flexible code that works with multiple object types using the same interface.</p> <p>You'll learn: Method overriding, runtime polymorphism, casting objects, and designing adaptable systems</p>"},{"location":"02-core-oop/#abstract-classes-interfaces","title":"Abstract Classes &amp; Interfaces","text":"<p>Define contracts and common behavior</p> <p>Create abstract classes that provide partial implementations and interfaces that define pure contracts. Learn when to use each approach and how they enable flexible, extensible designs.</p> <p>You'll learn: Abstract classes vs interfaces, implementing contracts, multiple inheritance through interfaces, and designing flexible systems</p> <p>Start here: Begin with Inheritance to understand class relationships, then move through Polymorphism and Encapsulation. Finish with Abstract Classes &amp; Interfaces to see how these principles work together. Complete the exercises after each topic to reinforce the concepts\u2014these principles build on each other.</p>"},{"location":"03-io-exceptions/","title":"File and Exception Handling Overview","text":"<p>Build robust applications that handle errors gracefully and work with external data. Learn to manage exceptions and interact with the file system using streams and modern I/O techniques.</p>"},{"location":"03-io-exceptions/#exception-handling","title":"Exception Handling","text":"<p>Write bulletproof code</p> <p>Master Java's exception handling system to create applications that recover from errors instead of crashing. Learn try-catch blocks, custom exceptions, and best practices for defensive programming.</p> <p>You'll learn: Try-catch-finally blocks, checked vs unchecked exceptions, throwing custom exceptions, and error handling strategies</p>"},{"location":"03-io-exceptions/#files-streams","title":"Files &amp; Streams","text":"<p>Connect to the outside world</p> <p>Work with files and directories using Java's I/O system. Understand byte streams, character streams, buffered I/O, and modern file operations for reading and writing data efficiently.</p> <p>You'll learn: FileInputStream/FileOutputStream, FileReader/FileWriter, buffered streams, and when to use each approach for different file operations</p> <p>Start here: Begin with Exception Handling to understand error management, then move to Files &amp; Streams to work with external data. Complete the exercises after both topics\u2014these skills are essential for real-world applications that must handle unexpected situations and persistent data.</p>"},{"location":"04-modern-java/","title":"Modern Java Overview","text":"<p>Learn the newer Java features that make your code cleaner and more powerful. Use generics for type safety, lambdas and streams for better data processing, and JavaFX to create desktop applications with visual interfaces.</p>"},{"location":"04-modern-java/#generics","title":"Generics","text":"<p>Type-safe, reusable code</p> <p>Learn Java's generics to write code that works with different types while catching errors at compile time. Create classes and methods that can handle multiple data types safely without casting or runtime errors.</p> <p>You'll learn: Generic classes and methods, type parameters, wildcards, and building components that work with different data types safely</p>"},{"location":"04-modern-java/#lambdas-streams","title":"Lambdas &amp; Streams","text":"<p>Functional programming in Java</p> <p>Use lambda expressions and the Stream API to process collections more efficiently. Replace long loops with short, clear operations for filtering, mapping, and reducing data in your programs.</p> <p>You'll learn: Lambda syntax, functional interfaces, stream operations like map/filter/reduce, method references, and processing data collections effectively</p>"},{"location":"04-modern-java/#javafx-gui","title":"JavaFX &amp; GUI","text":"<p>Build desktop applications</p> <p>Create desktop programs with graphical interfaces using JavaFX. Build interactive applications with buttons, text fields, layouts, and event handling for user-friendly software.</p> <p>You'll learn: JavaFX components, scene structure, event handling, layouts, styling with CSS, and building complete desktop applications</p> <p>Start here: Begin with Generics to understand type safety, then learn Lambdas &amp; Streams for data processing. Finish with JavaFX &amp; GUI to build visual applications. Complete the exercises after each topic\u2014these features will make your Java code more effective and modern.</p>"},{"location":"projects/","title":"Projects Overview","text":"<p>Apply your Java OOP knowledge through progressive building projects. Each sprint focuses on specific concepts, building from simple applications to complex systems that showcase your programming skills.</p>"},{"location":"projects/#sprint-1-early-concepts","title":"Sprint 1 - Early Concepts","text":"<p>Build your first object-oriented application</p> <p>Create a simple program using classes, objects, and basic collections. Focus on proper class design, object creation, and managing data with arrays or ArrayList. This sprint reinforces foundation concepts through practical coding.</p> <p>You'll build: A basic application like a student management system, library catalog, or inventory tracker using fundamental OOP concepts</p>"},{"location":"projects/#sprint-2-oop-principles","title":"Sprint 2 - OOP Principles","text":"<p>Design with inheritance and polymorphism</p> <p>Expand your application using inheritance hierarchies, method overriding, and polymorphic behavior. Implement proper encapsulation with access modifiers and create abstract classes or interfaces for flexible design.</p> <p>You'll build: An extended version of your Sprint 1 project with class hierarchies, specialized subclasses, and polymorphic method calls</p>"},{"location":"projects/#sprint-3-advanced-integration","title":"Sprint 3 - Advanced Integration","text":"<p>Handle real-world challenges</p> <p>Add robust error handling with exceptions and persistent data storage using file I/O. Integrate multiple advanced concepts to create a complete, professional application that handles unexpected situations gracefully.</p> <p>You'll build: A full-featured application with exception handling, file persistence, and advanced OOP design patterns</p>"},{"location":"projects/#final-project","title":"Final Project","text":"<p>Showcase your mastery</p> <p>Design and implement a comprehensive Java application that demonstrates all course concepts. Include modern Java features like generics, lambdas, and optionally a graphical interface. This capstone project shows your complete OOP programming skills.</p> <p>You'll build: A substantial application of your choice that incorporates the full range of Java OOP techniques learned throughout the course</p> <p>Start here: Begin Sprint 1 after completing the Foundations section. Work through each sprint in order, as they build upon previous work. Take time to plan your application design before coding\u2014good planning makes implementation smoother and more successful.</p>"}]}